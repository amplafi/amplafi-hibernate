### Eclipse Workspace Patch 1.0
#P hibernate
Index: core/src/main/java/org/hibernate/stat/SessionStatisticsImpl.java
===================================================================
--- core/src/main/java/org/hibernate/stat/SessionStatisticsImpl.java	(revision 15666)
+++ core/src/main/java/org/hibernate/stat/SessionStatisticsImpl.java	(working copy)
@@ -1,68 +0,0 @@
-/*
- * Hibernate, Relational Persistence for Idiomatic Java
- *
- * Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
- * indicated by the @author tags or express copyright attribution
- * statements applied by the authors.  All third-party contributions are
- * distributed under license by Red Hat Middleware LLC.
- *
- * This copyrighted material is made available to anyone wishing to use, modify,
- * copy, or redistribute it subject to the terms and conditions of the GNU
- * Lesser General Public License, as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
- * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
- * for more details.
- *
- * You should have received a copy of the GNU Lesser General Public License
- * along with this distribution; if not, write to:
- * Free Software Foundation, Inc.
- * 51 Franklin Street, Fifth Floor
- * Boston, MA  02110-1301  USA
- *
- */
-package org.hibernate.stat;
-
-import java.util.Collections;
-import java.util.Set;
-
-import org.hibernate.engine.SessionImplementor;
-
-/**
- * @author Gavin King
- */
-public class SessionStatisticsImpl implements SessionStatistics {
-
-	private final SessionImplementor session;
-	
-	public SessionStatisticsImpl(SessionImplementor session) {
-		this.session = session;
-	}
-
-	public int getEntityCount() {
-		return session.getPersistenceContext().getEntityEntries().size();
-	}
-	
-	public int getCollectionCount() {
-		return session.getPersistenceContext().getCollectionEntries().size();
-	}
-	
-	public Set getEntityKeys() {
-		return Collections.unmodifiableSet( session.getPersistenceContext().getEntitiesByKey().keySet() );
-	}
-	
-	public Set getCollectionKeys() {
-		return Collections.unmodifiableSet( session.getPersistenceContext().getCollectionsByKey().keySet() );
-	}
-	
-	public String toString() {
-		return new StringBuffer()
-			.append("SessionStatistics[")
-			.append("entity count=").append( getEntityCount() )
-			.append("collection count=").append( getCollectionCount() )
-			.append(']')
-			.toString();
-	}
-
-}
Index: core/src/main/java/org/hibernate/stat/simple/EntityStatisticsImpl.java
===================================================================
--- core/src/main/java/org/hibernate/stat/simple/EntityStatisticsImpl.java	(revision 0)
+++ core/src/main/java/org/hibernate/stat/simple/EntityStatisticsImpl.java	(working copy)
@@ -22,45 +22,67 @@
  * Boston, MA  02110-1301  USA
  *
  */
-package org.hibernate.stat;
+package org.hibernate.stat.simple;
 
+import org.hibernate.stat.EntityStatistics;
 
+
+
 /**
  * Entity related statistics
- * 
+ *
  * @author Gavin King
+ * @author Patrick Moore
  */
-public class EntityStatistics extends CategorizedStatistics {
-	
-	EntityStatistics(String name) {
+public class EntityStatisticsImpl extends CategorizedStatistics implements EntityStatistics {
+
+	public EntityStatisticsImpl(String name) {
 		super(name);
 	}
 
-	long loadCount;
-	long updateCount;
-	long insertCount;
-	long deleteCount;
-	long fetchCount;
-	long optimisticFailureCount;
+	private long loadCount;
+	private long updateCount;
+	private long insertCount;
+	private long deleteCount;
+	private long fetchCount;
+	private long optimisticFailureCount;
 
-	public long getDeleteCount() {
+	public synchronized long getDeleteCount() {
 		return deleteCount;
 	}
-	public long getInsertCount() {
+	public synchronized long incrDeleteCount() {
+		return ++deleteCount;
+	}
+	public synchronized long getInsertCount() {
 		return insertCount;
 	}
-	public long getLoadCount() {
+	public synchronized long incrInsertCount() {
+		return ++insertCount;
+	}
+	public synchronized long getLoadCount() {
 		return loadCount;
 	}
-	public long getUpdateCount() {
+	public synchronized long incrLoadCount() {
+		return ++loadCount;
+	}
+	public synchronized long getUpdateCount() {
 		return updateCount;
 	}
-	public long getFetchCount() {
+	public synchronized long incrUpdateCount() {
+		return ++updateCount;
+	}
+	public synchronized long getFetchCount() {
 		return fetchCount;
 	}
-	public long getOptimisticFailureCount() {
+	public synchronized long incrFetchCount() {
+		return ++fetchCount;
+	}
+	public synchronized long getOptimisticFailureCount() {
 		return optimisticFailureCount;
 	}
+	public synchronized long incrOptimisticFailureCount() {
+		return ++optimisticFailureCount;
+	}
 
 	public String toString() {
 		return new StringBuffer()

Property changes on: core/src/main/java/org/hibernate/stat/simple/EntityStatisticsImpl.java
___________________________________________________________________
Added: svn:mergeinfo

Index: core/src/main/java/org/hibernate/impl/SessionImpl.java
===================================================================
--- core/src/main/java/org/hibernate/impl/SessionImpl.java	(revision 15666)
+++ core/src/main/java/org/hibernate/impl/SessionImpl.java	(working copy)
@@ -124,7 +124,7 @@
 import org.hibernate.proxy.HibernateProxy;
 import org.hibernate.proxy.LazyInitializer;
 import org.hibernate.stat.SessionStatistics;
-import org.hibernate.stat.SessionStatisticsImpl;
+import org.hibernate.stat.simple.SessionStatisticsImpl;
 import org.hibernate.type.Type;
 import org.hibernate.util.ArrayHelper;
 import org.hibernate.util.CollectionHelper;
@@ -1773,7 +1773,7 @@
 	
 	public SessionStatistics getStatistics() {
 		checkTransactionSynchStatus();
-		return new SessionStatisticsImpl(this);
+		return getFactory().getStatistics().getSessionStatistics(this);
 	}
 
 	public boolean isEventSource() {
Index: core/src/main/java/org/hibernate/stat/simple/DefaultStatisticsFactory.java
===================================================================
--- core/src/main/java/org/hibernate/stat/simple/DefaultStatisticsFactory.java	(revision 0)
+++ core/src/main/java/org/hibernate/stat/simple/DefaultStatisticsFactory.java	(revision 0)
@@ -0,0 +1,75 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Middleware LLC.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ *
+ */
+package org.hibernate.stat.simple;
+
+import java.io.Serializable;
+
+import org.hibernate.cfg.Configuration;
+import org.hibernate.engine.SessionFactoryImplementor;
+import org.hibernate.engine.SessionImplementor;
+import org.hibernate.stat.SessionStatistics;
+import org.hibernate.stat.StatisticsFactory;
+import org.hibernate.stat.StatisticsImplementor;
+
+/**
+ * Default implementation of {@link StatisticsFactory} which supplies a {@link StatisticsImpl}.
+ * StatisticsImpl is synchronized on itself and can result in poor production behavior. 
+ * @author patmoore
+ *
+ */
+public class DefaultStatisticsFactory implements StatisticsFactory, Serializable {
+
+	private boolean defaultStatisticsEnabled;
+    /**
+     * @see org.hibernate.stat.StatisticsFactory#createStatisticsImplementor(SessionFactoryImplementor, Configuration)
+     */
+    public StatisticsImplementor createStatisticsImplementor(SessionFactoryImplementor sessionFactoryImplementor, Configuration configuration) {
+    	StatisticsImplementor statisticsImplementor = new StatisticsImpl(sessionFactoryImplementor, this);
+    	statisticsImplementor.setStatisticsEnabled(isDefaultStatisticsEnabled());
+    	return statisticsImplementor;
+    }
+
+	/**
+	 * @see org.hibernate.stat.StatisticsFactory#createSessionStatistics(org.hibernate.stat.StatisticsImplementor, org.hibernate.engine.SessionImplementor)
+	 */
+	public SessionStatistics createSessionStatistics(StatisticsImplementor statistics, SessionImplementor sessionImplementor) {
+		return new SessionStatisticsImpl(sessionImplementor);
+	}
+
+	/**
+	 * @param defaultStatisticsEnabled the defaultStatisticsEnabled to set
+	 */
+	public void setDefaultStatisticsEnabled(boolean defaultStatisticsEnabled) {
+		this.defaultStatisticsEnabled = defaultStatisticsEnabled;
+	}
+
+	/**
+	 * @return the defaultStatisticsEnabled
+	 */
+	public boolean isDefaultStatisticsEnabled() {
+		return defaultStatisticsEnabled;
+	}
+
+}
Index: core/src/main/java/org/hibernate/stat/EntityStatistics.java
===================================================================
--- core/src/main/java/org/hibernate/stat/EntityStatistics.java	(revision 15666)
+++ core/src/main/java/org/hibernate/stat/EntityStatistics.java	(working copy)
@@ -27,52 +27,38 @@
 
 /**
  * Entity related statistics
- * 
+ *
  * @author Gavin King
  */
-public class EntityStatistics extends CategorizedStatistics {
-	
-	EntityStatistics(String name) {
-		super(name);
-	}
-
-	long loadCount;
-	long updateCount;
-	long insertCount;
-	long deleteCount;
-	long fetchCount;
-	long optimisticFailureCount;
-
-	public long getDeleteCount() {
-		return deleteCount;
-	}
-	public long getInsertCount() {
-		return insertCount;
-	}
-	public long getLoadCount() {
-		return loadCount;
-	}
-	public long getUpdateCount() {
-		return updateCount;
-	}
-	public long getFetchCount() {
-		return fetchCount;
-	}
-	public long getOptimisticFailureCount() {
-		return optimisticFailureCount;
-	}
-
-	public String toString() {
-		return new StringBuffer()
-		    .append("EntityStatistics")
-			.append("[loadCount=").append(this.loadCount)
-			.append(",updateCount=").append(this.updateCount)
-			.append(",insertCount=").append(this.insertCount)
-			.append(",deleteCount=").append(this.deleteCount)
-			.append(",fetchCount=").append(this.fetchCount)
-			.append(",optimisticLockFailureCount=").append(this.optimisticFailureCount)
-			.append(']')
-			.toString();
-	}
-
+public interface EntityStatistics extends CategorizedStats {
+	public long getDeleteCount();
+	public long getInsertCount();
+	public long getLoadCount();
+	public long getUpdateCount();
+	public long getFetchCount();
+	public long getOptimisticFailureCount();
+	/**
+	 *
+	 */
+	public long incrLoadCount();
+	/**
+	 *
+	 */
+	public long incrFetchCount();
+	/**
+	 *
+	 */
+	public long incrUpdateCount();
+	/**
+	 *
+	 */
+	public long incrInsertCount();
+	/**
+	 *
+	 */
+	public long incrDeleteCount();
+	/**
+	 *
+	 */
+	public long incrOptimisticFailureCount();
 }
Index: core/src/main/java/org/hibernate/stat/simple/QueryStatisticsImpl.java
===================================================================
--- core/src/main/java/org/hibernate/stat/simple/QueryStatisticsImpl.java	(revision 0)
+++ core/src/main/java/org/hibernate/stat/simple/QueryStatisticsImpl.java	(working copy)
@@ -22,95 +22,108 @@
  * Boston, MA  02110-1301  USA
  *
  */
-package org.hibernate.stat;
+package org.hibernate.stat.simple;
 
+import org.hibernate.stat.QueryStatistics;
+
+
 /**
  * Query statistics (HQL and SQL)
- * 
+ *
  * Note that for a cached query, the cache miss is equals to the db count
- * 
+ *
  * @author Gavin King
+ * @author Patrick Moore
  */
-public class QueryStatistics extends CategorizedStatistics {
+public class QueryStatisticsImpl extends CategorizedStatistics implements QueryStatistics {
 
-	/*package*/ long cacheHitCount;
-	/*package*/ long cacheMissCount;
-	/*package*/ long cachePutCount;
+	private long cacheHitCount;
+	private long cacheMissCount;
+	private long cachePutCount;
 	private long executionCount;
 	private long executionRowCount;
 	private long executionAvgTime;
 	private long executionMaxTime;
 	private long executionMinTime = Long.MAX_VALUE;
 
-	QueryStatistics(String query) {
+	public QueryStatisticsImpl(String query) {
 		super(query);
 	}
 
-	/**
-	 * queries executed to the DB
-	 */
 	public long getExecutionCount() {
 		return executionCount;
 	}
-	
+
 	/**
 	 * Queries retrieved successfully from the cache
 	 */
-	public long getCacheHitCount() {
+	public synchronized long getCacheHitCount() {
 		return cacheHitCount;
 	}
-	
-	public long getCachePutCount() {
+	public synchronized long incrCacheHitCount() {
+		return ++cacheHitCount;
+	}
+
+	public synchronized long getCachePutCount() {
 		return cachePutCount;
 	}
-	
-	public long getCacheMissCount() {
+	public synchronized long incrCachePutCount() {
+		return ++cachePutCount;
+	}
+
+	public synchronized long getCacheMissCount() {
 		return cacheMissCount;
 	}
-	
+	public synchronized long incrCacheMissCount() {
+		return ++cacheMissCount;
+	}
 	/**
 	 * Number of lines returned by all the executions of this query (from DB)
-	 * For now, {@link org.hibernate.Query#iterate()} 
-	 * and {@link org.hibernate.Query#scroll()()} do not fill this statistic
+	 * For now, {@link org.hibernate.Query#iterate()}
+	 * and {@link org.hibernate.Query#scroll()} do not fill this statistic
 	 *
 	 * @return The number of rows cumulatively returned by the given query; iterate
 	 * and scroll queries do not effect this total as their number of returned rows
 	 * is not known at execution time.
 	 */
-	public long getExecutionRowCount() {
+	public synchronized long getExecutionRowCount() {
 		return executionRowCount;
 	}
 
 	/**
 	 * average time in ms taken by the excution of this query onto the DB
 	 */
-	public long getExecutionAvgTime() {
+	public synchronized long getExecutionAvgTime() {
 		return executionAvgTime;
 	}
 
 	/**
 	 * max time in ms taken by the excution of this query onto the DB
 	 */
-	public long getExecutionMaxTime() {
+	public synchronized long getExecutionMaxTime() {
 		return executionMaxTime;
 	}
-	
+
 	/**
 	 * min time in ms taken by the excution of this query onto the DB
 	 */
-	public long getExecutionMinTime() {
+	public synchronized long getExecutionMinTime() {
 		return executionMinTime;
 	}
-	
+
 	/**
 	 * add statistics report of a DB query
-	 * 
+	 *
 	 * @param rows rows count returned
 	 * @param time time taken
 	 */
-	void executed(long rows, long time) {
-		if (time < executionMinTime) executionMinTime = time;
-		if (time > executionMaxTime) executionMaxTime = time;
+	public synchronized void executed(long rows, long time) {
+		if (time < executionMinTime) {
+            executionMinTime = time;
+        }
+		if (time > executionMaxTime) {
+            executionMaxTime = time;
+        }
 		executionAvgTime = ( executionAvgTime * executionCount + time ) / ( executionCount + 1 );
 		executionCount++;
 		executionRowCount += rows;

Property changes on: core/src/main/java/org/hibernate/stat/simple/QueryStatisticsImpl.java
___________________________________________________________________
Added: svn:mergeinfo

Index: core/src/main/java/org/hibernate/stat/StatisticsImplementor.java
===================================================================
--- core/src/main/java/org/hibernate/stat/StatisticsImplementor.java	(revision 15666)
+++ core/src/main/java/org/hibernate/stat/StatisticsImplementor.java	(working copy)
@@ -29,7 +29,7 @@
  * 
  * @author Emmanuel Bernard
  */
-public interface StatisticsImplementor {
+public interface StatisticsImplementor extends Statistics {
 	public void openSession();
 	public void closeSession();
 	public void flush();
Index: core/src/main/java/org/hibernate/stat/Statistics.java
===================================================================
--- core/src/main/java/org/hibernate/stat/Statistics.java	(revision 15666)
+++ core/src/main/java/org/hibernate/stat/Statistics.java	(working copy)
@@ -24,7 +24,9 @@
  */
 package org.hibernate.stat;
 
+import org.hibernate.engine.SessionImplementor;
 
+
 /**
  * Statistics for a particular <tt>SessionFactory</tt>.
  * Beware of milliseconds metrics, they are depdendent of the JVM precision:
@@ -231,4 +233,6 @@
 	 * that occurred
 	 */
 	public long getOptimisticFailureCount();
+
+    public SessionStatistics getSessionStatistics(SessionImplementor sessionImplementor);
 }
\ No newline at end of file
Index: core/src/main/java/org/hibernate/stat/StatisticsImpl.java
===================================================================
--- core/src/main/java/org/hibernate/stat/StatisticsImpl.java	(revision 15666)
+++ core/src/main/java/org/hibernate/stat/StatisticsImpl.java	(working copy)
@@ -1,662 +0,0 @@
-/*
- * Hibernate, Relational Persistence for Idiomatic Java
- *
- * Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
- * indicated by the @author tags or express copyright attribution
- * statements applied by the authors.  All third-party contributions are
- * distributed under license by Red Hat Middleware LLC.
- *
- * This copyrighted material is made available to anyone wishing to use, modify,
- * copy, or redistribute it subject to the terms and conditions of the GNU
- * Lesser General Public License, as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
- * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
- * for more details.
- *
- * You should have received a copy of the GNU Lesser General Public License
- * along with this distribution; if not, write to:
- * Free Software Foundation, Inc.
- * 51 Franklin Street, Fifth Floor
- * Boston, MA  02110-1301  USA
- *
- */
-package org.hibernate.stat;
-import java.util.HashMap;
-import java.util.Map;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.hibernate.cache.Region;
-import org.hibernate.engine.SessionFactoryImplementor;
-import org.hibernate.util.ArrayHelper;
-
-/**
- * @see org.hibernate.stat.Statistics 
- *  
- * @author Gavin King
- */
-public class StatisticsImpl implements Statistics, StatisticsImplementor {
-	
-	//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective
-	
-	private static final Logger log = LoggerFactory.getLogger(StatisticsImpl.class);
-
-	private SessionFactoryImplementor sessionFactory;
-
-	private boolean isStatisticsEnabled;
-	private long startTime;
-	private long sessionOpenCount;
-	private long sessionCloseCount;
-	private long flushCount;
-	private long connectCount;
-	
-	private long prepareStatementCount;
-	private long closeStatementCount;
-	
-	private long entityLoadCount;
-	private long entityUpdateCount;
-	private long entityInsertCount;
-	private long entityDeleteCount;
-	private long entityFetchCount;
-	private long collectionLoadCount;
-	private long collectionUpdateCount;
-	private long collectionRemoveCount;
-	private long collectionRecreateCount;
-	private long collectionFetchCount;
-	
-	private long secondLevelCacheHitCount;
-	private long secondLevelCacheMissCount;
-	private long secondLevelCachePutCount;
-	
-	private long queryExecutionCount;
-	private long queryExecutionMaxTime;
-	private String queryExecutionMaxTimeQueryString;
-	private long queryCacheHitCount;
-	private long queryCacheMissCount;
-	private long queryCachePutCount;
-	
-	private long commitedTransactionCount;
-	private long transactionCount;
-	
-	private long optimisticFailureCount;
-	
-	/** second level cache statistics per region */
-	private final Map secondLevelCacheStatistics = new HashMap();
-	/** entity statistics per name */
-	private final Map entityStatistics = new HashMap();
-	/** collection statistics per name */
-	private final Map collectionStatistics = new HashMap();
-	/** entity statistics per query string (HQL or SQL) */
-	private final Map queryStatistics = new HashMap();
-
-	public StatisticsImpl() {
-		clear();
-	}
-
-	public StatisticsImpl(SessionFactoryImplementor sessionFactory) {
-		clear();
-		this.sessionFactory = sessionFactory;
-	}
-	
-	/**
-	 * reset all statistics
-	 */
-	public synchronized void clear() {
-		secondLevelCacheHitCount = 0;
-		secondLevelCacheMissCount = 0;
-		secondLevelCachePutCount = 0;
-		
-		sessionCloseCount = 0;
-		sessionOpenCount = 0;
-		flushCount = 0;
-		connectCount = 0;
-		
-		prepareStatementCount = 0;
-		closeStatementCount = 0;
-		
-		entityDeleteCount = 0;
-		entityInsertCount = 0;
-		entityUpdateCount = 0;
-		entityLoadCount = 0;
-		entityFetchCount = 0;
-		
-		collectionRemoveCount = 0;
-		collectionUpdateCount = 0;
-		collectionRecreateCount = 0;
-		collectionLoadCount = 0;
-		collectionFetchCount = 0;
-		
-		queryExecutionCount = 0;
-		queryCacheHitCount = 0;
-		queryExecutionMaxTime = 0;
-		queryExecutionMaxTimeQueryString = null;
-		queryCacheMissCount = 0;
-		queryCachePutCount = 0;
-		
-		transactionCount = 0;
-		commitedTransactionCount = 0;
-		
-		optimisticFailureCount = 0;
-		
-		secondLevelCacheStatistics.clear();
-		entityStatistics.clear();
-		collectionStatistics.clear();
-		queryStatistics.clear();
-		
-		startTime = System.currentTimeMillis();
-	}
-	
-	public synchronized void openSession() {
-		sessionOpenCount++;
-	}
-	
-	public synchronized void closeSession() {
-		sessionCloseCount++;
-	}
-	
-	public synchronized void flush() {
-		flushCount++;
-	}
-	
-	public synchronized void connect() {
-		connectCount++;
-	}
-	
-	public synchronized void loadEntity(String entityName) {
-		entityLoadCount++;
-		getEntityStatistics(entityName).loadCount++;
-	}
-
-	public synchronized void fetchEntity(String entityName) {
-		entityFetchCount++;
-		getEntityStatistics(entityName).fetchCount++;
-	}
-
-	/**
-	 * find entity statistics per name
-	 * 
-	 * @param entityName entity name
-	 * @return EntityStatistics object
-	 */
-	public synchronized EntityStatistics getEntityStatistics(String entityName) {
-		EntityStatistics es = (EntityStatistics) entityStatistics.get(entityName);
-		if (es==null) {
-			es = new EntityStatistics(entityName);
-			entityStatistics.put(entityName, es);
-		}
-		return es;
-	}
-	
-	public synchronized void updateEntity(String entityName) {
-		entityUpdateCount++;
-		EntityStatistics es = getEntityStatistics(entityName);
-		es.updateCount++;
-	}
-
-	public synchronized void insertEntity(String entityName) {
-		entityInsertCount++;
-		EntityStatistics es = getEntityStatistics(entityName);
-		es.insertCount++;
-	}
-
-	public synchronized void deleteEntity(String entityName) {
-		entityDeleteCount++;
-		EntityStatistics es = getEntityStatistics(entityName);
-		es.deleteCount++;
-	}
-
-	/**
-	 * Get collection statistics per role
-	 * 
-	 * @param role collection role
-	 * @return CollectionStatistics
-	 */
-	public synchronized CollectionStatistics getCollectionStatistics(String role) {
-		CollectionStatistics cs = (CollectionStatistics) collectionStatistics.get(role);
-		if (cs==null) {
-			cs = new CollectionStatistics(role);
-			collectionStatistics.put(role, cs);
-		}
-		return cs;
-	}
-	
-	public synchronized void loadCollection(String role) {
-		collectionLoadCount++;
-		getCollectionStatistics(role).loadCount++;
-	}
-
-	public synchronized void fetchCollection(String role) {
-		collectionFetchCount++;
-		getCollectionStatistics(role).fetchCount++;
-	}
-
-	public synchronized void updateCollection(String role) {
-		collectionUpdateCount++;
-		getCollectionStatistics(role).updateCount++;
-	}
-
-	public synchronized void recreateCollection(String role) {
-		collectionRecreateCount++;
-		getCollectionStatistics(role).recreateCount++;
-	}
-
-	public synchronized void removeCollection(String role) {
-		collectionRemoveCount++;
-		getCollectionStatistics(role).removeCount++;
-	}
-	
-	/**
-	 * Second level cache statistics per region
-	 * 
-	 * @param regionName region name
-	 * @return SecondLevelCacheStatistics
-	 */
-	public synchronized SecondLevelCacheStatistics getSecondLevelCacheStatistics(String regionName) {
-		SecondLevelCacheStatistics slcs = ( SecondLevelCacheStatistics ) secondLevelCacheStatistics.get( regionName );
-		if ( slcs == null ) {
-			if ( sessionFactory == null ) {
-				return null;
-			}
-			Region region = sessionFactory.getSecondLevelCacheRegion( regionName );
-			if ( region == null ) {
-				return null;
-			}
-			slcs = new SecondLevelCacheStatistics( region );
-			secondLevelCacheStatistics.put( regionName, slcs );
-		}
-		return slcs;
-	}
-
-	public synchronized void secondLevelCachePut(String regionName) {
-		secondLevelCachePutCount++;
-		getSecondLevelCacheStatistics(regionName).putCount++;
-	}
-
-	public synchronized void secondLevelCacheHit(String regionName) {
-		secondLevelCacheHitCount++;
-		getSecondLevelCacheStatistics(regionName).hitCount++;
-	}
-
-	public synchronized void secondLevelCacheMiss(String regionName) {
-		secondLevelCacheMissCount++;
-		getSecondLevelCacheStatistics(regionName).missCount++;
-	}
-
-	public synchronized void queryExecuted(String hql, int rows, long time) {
-		queryExecutionCount++;
-		if (queryExecutionMaxTime<time) {
-			queryExecutionMaxTime=time;
-			queryExecutionMaxTimeQueryString = hql;
-		}
-		if (hql!=null) {
-			QueryStatistics qs = getQueryStatistics(hql);
-			qs.executed(rows, time);
-		}
-	}
-	
-	public synchronized void queryCacheHit(String hql, String regionName) {
-		queryCacheHitCount++;
-		if (hql!=null) {
-			QueryStatistics qs = getQueryStatistics(hql);
-			qs.cacheHitCount++;
-		}
-		SecondLevelCacheStatistics slcs = getSecondLevelCacheStatistics(regionName);
-		slcs.hitCount++;
-	}
-
-	public synchronized void queryCacheMiss(String hql, String regionName) {
-		queryCacheMissCount++;
-		if (hql!=null) {
-			QueryStatistics qs = getQueryStatistics(hql);
-			qs.cacheMissCount++;
-		}
-		SecondLevelCacheStatistics slcs = getSecondLevelCacheStatistics(regionName);
-		slcs.missCount++;
-	}
-
-	public synchronized void queryCachePut(String hql, String regionName) {
-		queryCachePutCount++;
-		if (hql!=null) {
-			QueryStatistics qs = getQueryStatistics(hql);
-			qs.cachePutCount++;
-		}
-		SecondLevelCacheStatistics slcs = getSecondLevelCacheStatistics(regionName);
-		slcs.putCount++;
-	}
-
-	/**
-	 * Query statistics from query string (HQL or SQL)
-	 * 
-	 * @param queryString query string
-	 * @return QueryStatistics
-	 */
-	public synchronized QueryStatistics getQueryStatistics(String queryString) {
-		QueryStatistics qs = (QueryStatistics) queryStatistics.get(queryString);
-		if (qs==null) {
-			qs = new QueryStatistics(queryString);
-			queryStatistics.put(queryString, qs);
-		}
-		return qs;
-	}
-
-	/**
-	 * @return entity deletion count
-	 */
-	public long getEntityDeleteCount() {
-		return entityDeleteCount;
-	}
-	
-	/**
-	 * @return entity insertion count
-	 */
-	public long getEntityInsertCount() {
-		return entityInsertCount;
-	}
-	
-	/**
-	 * @return entity load (from DB)
-	 */
-	public long getEntityLoadCount() {
-		return entityLoadCount;
-	}
-	
-	/**
-	 * @return entity fetch (from DB)
-	 */
-	public long getEntityFetchCount() {
-		return entityFetchCount;
-	}
-
-	/**
-	 * @return entity update
-	 */
-	public long getEntityUpdateCount() {
-		return entityUpdateCount;
-	}
-
-	public long getQueryExecutionCount() {
-		return queryExecutionCount;
-	}
-	
-	public long getQueryCacheHitCount() {
-		return queryCacheHitCount;
-	}
-	
-	public long getQueryCacheMissCount() {
-		return queryCacheMissCount;
-	}
-	
-	public long getQueryCachePutCount() {
-		return queryCachePutCount;
-	}
-	
-	/**
-	 * @return flush
-	 */
-	public long getFlushCount() {
-		return flushCount;
-	}
-	
-	/**
-	 * @return session connect
-	 */
-	public long getConnectCount() {
-		return connectCount;
-	}
-
-	/**
-	 * @return second level cache hit
-	 */
-	public long getSecondLevelCacheHitCount() {
-		return secondLevelCacheHitCount;
-	}
-
-	/**
-	 * @return second level cache miss
-	 */
-	public long getSecondLevelCacheMissCount() {
-		return secondLevelCacheMissCount;
-	}
-	
-	/**
-	 * @return second level cache put
-	 */
-	public long getSecondLevelCachePutCount() {
-		return secondLevelCachePutCount;
-	}
-
-	/**
-	 * @return session closing
-	 */
-	public long getSessionCloseCount() {
-		return sessionCloseCount;
-	}
-	
-	/**
-	 * @return session opening
-	 */
-	public long getSessionOpenCount() {
-		return sessionOpenCount;
-	}
-
-	/**
-	 * @return collection loading (from DB)
-	 */
-	public long getCollectionLoadCount() {
-		return collectionLoadCount;
-	}
-
-	/**
-	 * @return collection fetching (from DB)
-	 */
-	public long getCollectionFetchCount() {
-		return collectionFetchCount;
-	}
-	
-	/**
-	 * @return collection update
-	 */
-	public long getCollectionUpdateCount() {
-		return collectionUpdateCount;
-	}
-
-	/**
-	 * @return collection removal
-	 * FIXME: even if isInverse="true"?
-	 */
-	public long getCollectionRemoveCount() {
-		return collectionRemoveCount;
-	}
-	/**
-	 * @return collection recreation
-	 */
-	public long getCollectionRecreateCount() {
-		return collectionRecreateCount;
-	}
-
-	/**
-	 * @return start time in ms (JVM standards {@link System#currentTimeMillis()})
-	 */
-	public long getStartTime() {
-		return startTime;
-	}
-	
-	/**
-	 * log in info level the main statistics
-	 */
-	public void logSummary() {
-		log.info("Logging statistics....");
-		log.info("start time: " + startTime);
-		log.info("sessions opened: " + sessionOpenCount);
-		log.info("sessions closed: " + sessionCloseCount);
-		log.info("transactions: " + transactionCount);
-		log.info("successful transactions: " + commitedTransactionCount);
-		log.info("optimistic lock failures: " + optimisticFailureCount);
-		log.info("flushes: " + flushCount);
-		log.info("connections obtained: " + connectCount);
-		log.info("statements prepared: " + prepareStatementCount);
-		log.info("statements closed: " + closeStatementCount);
-		log.info("second level cache puts: " + secondLevelCachePutCount);
-		log.info("second level cache hits: " + secondLevelCacheHitCount);
-		log.info("second level cache misses: " + secondLevelCacheMissCount);
-		log.info("entities loaded: " + entityLoadCount);
-		log.info("entities updated: " + entityUpdateCount);
-		log.info("entities inserted: " + entityInsertCount);
-		log.info("entities deleted: " + entityDeleteCount);
-		log.info("entities fetched (minimize this): " + entityFetchCount);
-		log.info("collections loaded: " + collectionLoadCount);
-		log.info("collections updated: " + collectionUpdateCount);
-		log.info("collections removed: " + collectionRemoveCount);
-		log.info("collections recreated: " + collectionRecreateCount);
-		log.info("collections fetched (minimize this): " + collectionFetchCount);
-		log.info("queries executed to database: " + queryExecutionCount);
-		log.info("query cache puts: " + queryCachePutCount);
-		log.info("query cache hits: " + queryCacheHitCount);
-		log.info("query cache misses: " + queryCacheMissCount);
-		log.info("max query time: " + queryExecutionMaxTime + "ms");
-	}
-	
-	/**
-	 * Are statistics logged
-	 */
-	public boolean isStatisticsEnabled() {
-		return isStatisticsEnabled;
-	}
-	
-	/**
-	 * Enable statistics logs (this is a dynamic parameter)
-	 */
-	public void setStatisticsEnabled(boolean b) {
-		isStatisticsEnabled = b;
-	}
-
-	/**
-	 * @return Returns the max query execution time,
-	 * for all queries
-	 */
-	public long getQueryExecutionMaxTime() {
-		return queryExecutionMaxTime;
-	}
-	
-	/**
-	 * Get all executed query strings
-	 */
-	public String[] getQueries() {
-		return ArrayHelper.toStringArray( queryStatistics.keySet() );
-	}
-	
-	/**
-	 * Get the names of all entities
-	 */
-	public String[] getEntityNames() {
-		if (sessionFactory==null) {
-			return ArrayHelper.toStringArray( entityStatistics.keySet() );
-		}
-		else {
-			return ArrayHelper.toStringArray( sessionFactory.getAllClassMetadata().keySet() );
-		}
-	}
-
-	/**
-	 * Get the names of all collection roles
-	 */
-	public String[] getCollectionRoleNames() {
-		if (sessionFactory==null) {
-			return ArrayHelper.toStringArray( collectionStatistics.keySet() );
-		}
-		else {
-			return ArrayHelper.toStringArray( sessionFactory.getAllCollectionMetadata().keySet() );
-		}
-	}
-	
-	/**
-	 * Get all second-level cache region names
-	 */
-	public String[] getSecondLevelCacheRegionNames() {
-		if (sessionFactory==null) {
-			return ArrayHelper.toStringArray( secondLevelCacheStatistics.keySet() );
-		}
-		else {
-			return ArrayHelper.toStringArray( sessionFactory.getAllSecondLevelCacheRegions().keySet() );
-		}
-	}
-
-	public void endTransaction(boolean success) {
-		transactionCount++;
-		if (success) commitedTransactionCount++;
-	}
-	
-	public long getSuccessfulTransactionCount() {
-		return commitedTransactionCount;
-	}
-	
-	public long getTransactionCount() {
-		return transactionCount;
-	}
-
-	public void closeStatement() {
-		closeStatementCount++;
-	}
-
-	public void prepareStatement() {
-		prepareStatementCount++;
-	}
-
-	public long getCloseStatementCount() {
-		return closeStatementCount;
-	}
-
-	public long getPrepareStatementCount() {
-		return prepareStatementCount;
-	}
-
-	public void optimisticFailure(String entityName) {
-		optimisticFailureCount++;
-		getEntityStatistics(entityName).optimisticFailureCount++;
-	}
-
-	public long getOptimisticFailureCount() {
-		return optimisticFailureCount;
-	}
-	public String toString() {
-		return new StringBuffer()
-			.append("Statistics[")
-			.append("start time=").append(startTime)
-			.append(",sessions opened=").append(sessionOpenCount)
-			.append(",sessions closed=").append(sessionCloseCount)
-			.append(",transactions=").append(transactionCount)
-			.append(",successful transactions=").append(commitedTransactionCount)
-			.append(",optimistic lock failures=").append(optimisticFailureCount)
-			.append(",flushes=").append(flushCount)
-			.append(",connections obtained=").append(connectCount)
-			.append(",statements prepared=").append(prepareStatementCount)
-			.append(",statements closed=").append(closeStatementCount)
-			.append(",second level cache puts=").append(secondLevelCachePutCount)
-			.append(",second level cache hits=").append(secondLevelCacheHitCount)
-			.append(",second level cache misses=").append(secondLevelCacheMissCount)
-			.append(",entities loaded=").append(entityLoadCount)
-			.append(",entities updated=").append(entityUpdateCount)
-			.append(",entities inserted=").append(entityInsertCount)
-			.append(",entities deleted=").append(entityDeleteCount)
-			.append(",entities fetched=").append(entityFetchCount)
-			.append(",collections loaded=").append(collectionLoadCount)
-			.append(",collections updated=").append(collectionUpdateCount)
-			.append(",collections removed=").append(collectionRemoveCount)
-			.append(",collections recreated=").append(collectionRecreateCount)
-			.append(",collections fetched=").append(collectionFetchCount)
-			.append(",queries executed to database=").append(queryExecutionCount)
-			.append(",query cache puts=").append(queryCachePutCount)
-			.append(",query cache hits=").append(queryCacheHitCount)
-			.append(",query cache misses=").append(queryCacheMissCount)
-			.append(",max query time=").append(queryExecutionMaxTime)
-			.append(']')
-			.toString();
-	}
-
-	public String getQueryExecutionMaxTimeQueryString() {
-		return queryExecutionMaxTimeQueryString;
-	}
-	
-}
\ No newline at end of file
Index: core/src/main/java/org/hibernate/stat/simple/SecondLevelCacheStatisticsImpl.java
===================================================================
--- core/src/main/java/org/hibernate/stat/simple/SecondLevelCacheStatisticsImpl.java	(revision 0)
+++ core/src/main/java/org/hibernate/stat/simple/SecondLevelCacheStatisticsImpl.java	(working copy)
@@ -22,7 +22,7 @@
  * Boston, MA  02110-1301  USA
  *
  */
-package org.hibernate.stat;
+package org.hibernate.stat.simple;
 
 import java.util.HashMap;
 import java.util.Iterator;
@@ -30,42 +30,52 @@
 
 import org.hibernate.cache.CacheKey;
 import org.hibernate.cache.Region;
+import org.hibernate.stat.SecondLevelCacheStatistics;
 
 /**
  * Second level cache statistics of a specific region
- * 
+ *
  * @author Gavin King
  */
-public class SecondLevelCacheStatistics extends CategorizedStatistics {
-	
+public class SecondLevelCacheStatisticsImpl extends CategorizedStatistics implements SecondLevelCacheStatistics {
+
     private transient Region region;
-	long hitCount;
-	long missCount;
-	long putCount;
+	private long hitCount;
+	private long missCount;
+	private long putCount;
 
-	SecondLevelCacheStatistics(Region region) {
+	public SecondLevelCacheStatisticsImpl(Region region) {
 		super( region.getName() );
 		this.region = region;
 	}
-	public long getHitCount() {
+	public synchronized long getHitCount() {
 		return hitCount;
 	}
-	public long getMissCount() {
+	public synchronized long incrHitCount() {
+		return ++hitCount;
+	}
+	public synchronized long getMissCount() {
 		return missCount;
 	}
-	public long getPutCount() {
+	public synchronized long incrMissCount() {
+		return ++missCount;
+	}
+	public synchronized long getPutCount() {
 		return putCount;
 	}
-	public long getElementCountInMemory() {
+	public synchronized long incrPutCount() {
+		return ++putCount;
+	}
+	public synchronized long getElementCountInMemory() {
 		return region.getElementCountInMemory();
 	}
-	public long getElementCountOnDisk() {
+	public synchronized long getElementCountOnDisk() {
 		return region.getElementCountOnDisk();
 	}
 	public long getSizeInMemory() {
 		return region.getSizeInMemory();
 	}
-	
+
 	public Map getEntries() {
 		Map map = new HashMap();
 		Iterator iter = region.toMap().entrySet().iterator();
@@ -76,9 +86,10 @@
 		return map;
 	}
 
-	public String toString() {
+	@Override
+    public String toString() {
 		StringBuffer buf = new StringBuffer()
-		    .append("SecondLevelCacheStatistics")
+		    .append("SecondLevelCacheStats")
 			.append("[hitCount=").append(this.hitCount)
 			.append(",missCount=").append(this.missCount)
 			.append(",putCount=").append(this.putCount);

Property changes on: core/src/main/java/org/hibernate/stat/simple/SecondLevelCacheStatisticsImpl.java
___________________________________________________________________
Added: svn:mergeinfo

Index: core/src/main/java/org/hibernate/cfg/Configuration.java
===================================================================
--- core/src/main/java/org/hibernate/cfg/Configuration.java	(revision 15666)
+++ core/src/main/java/org/hibernate/cfg/Configuration.java	(working copy)
@@ -128,6 +128,8 @@
 import org.hibernate.mapping.Column;
 import org.hibernate.proxy.EntityNotFoundDelegate;
 import org.hibernate.secure.JACCConfiguration;
+import org.hibernate.stat.StatisticsFactory;
+import org.hibernate.stat.simple.DefaultStatisticsFactory;
 import org.hibernate.tool.hbm2ddl.DatabaseMetadata;
 import org.hibernate.tool.hbm2ddl.TableMetadata;
 import org.hibernate.type.SerializationException;
@@ -193,6 +195,7 @@
 	private Properties properties;
 	private EntityResolver entityResolver;
 	private EntityNotFoundDelegate entityNotFoundDelegate;
+	private StatisticsFactory statisticsFactory;
 
 	protected transient XMLHelper xmlHelper;
 	protected NamingStrategy namingStrategy;
@@ -251,6 +254,7 @@
 //		componentTuplizerFactory = new ComponentTuplizerFactory();
 
 		identifierGeneratorFactory = new DefaultIdentifierGeneratorFactory();
+		statisticsFactory = new DefaultStatisticsFactory();
 	}
 
 	public EntityTuplizerFactory getEntityTuplizerFactory() {
@@ -1343,7 +1347,8 @@
 				mapping,
 				settings,
 				getInitializedEventListeners(),
-				sessionFactoryObserver
+				sessionFactoryObserver,
+				statisticsFactory
 			);
 	}
 
@@ -2243,7 +2248,21 @@
 		this.sessionFactoryObserver = sessionFactoryObserver;
 	}
 
+	/**
+	 * @param statisticsFactory the statisticsFactory to set
+	 */
+	public void setStatisticsFactory(StatisticsFactory statisticsFactory) {
+		this.statisticsFactory = statisticsFactory;
+	}
 
+	/**
+	 * @return the statisticsFactory
+	 */
+	public StatisticsFactory getStatisticsFactory() {
+		return statisticsFactory;
+	}
+
+
 	// Mappings impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 	/**
Index: core/src/main/java/org/hibernate/stat/simple/StatisticsImpl.java
===================================================================
--- core/src/main/java/org/hibernate/stat/simple/StatisticsImpl.java	(revision 0)
+++ core/src/main/java/org/hibernate/stat/simple/StatisticsImpl.java	(working copy)
@@ -22,7 +22,7 @@
  * Boston, MA  02110-1301  USA
  *
  */
-package org.hibernate.stat;
+package org.hibernate.stat.simple;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -30,6 +30,15 @@
 import org.slf4j.LoggerFactory;
 import org.hibernate.cache.Region;
 import org.hibernate.engine.SessionFactoryImplementor;
+import org.hibernate.engine.SessionImplementor;
+import org.hibernate.stat.CollectionStatistics;
+import org.hibernate.stat.EntityStatistics;
+import org.hibernate.stat.QueryStatistics;
+import org.hibernate.stat.SecondLevelCacheStatistics;
+import org.hibernate.stat.SessionStatistics;
+import org.hibernate.stat.Statistics;
+import org.hibernate.stat.StatisticsFactory;
+import org.hibernate.stat.StatisticsImplementor;
 import org.hibernate.util.ArrayHelper;
 
 /**
@@ -91,13 +100,16 @@
 	/** entity statistics per query string (HQL or SQL) */
 	private final Map queryStatistics = new HashMap();
 
+	private StatisticsFactory statisticsFactory;
+
 	public StatisticsImpl() {
 		clear();
 	}
 
-	public StatisticsImpl(SessionFactoryImplementor sessionFactory) {
+	public StatisticsImpl(SessionFactoryImplementor sessionFactory, StatisticsFactory statisticsFactory) {
 		clear();
 		this.sessionFactory = sessionFactory;
+		this.statisticsFactory = statisticsFactory;
 	}
 	
 	/**
@@ -166,12 +178,12 @@
 	
 	public synchronized void loadEntity(String entityName) {
 		entityLoadCount++;
-		getEntityStatistics(entityName).loadCount++;
+		getEntityStatistics(entityName).incrLoadCount();
 	}
 
 	public synchronized void fetchEntity(String entityName) {
 		entityFetchCount++;
-		getEntityStatistics(entityName).fetchCount++;
+		getEntityStatistics(entityName).incrFetchCount();
 	}
 
 	/**
@@ -183,7 +195,7 @@
 	public synchronized EntityStatistics getEntityStatistics(String entityName) {
 		EntityStatistics es = (EntityStatistics) entityStatistics.get(entityName);
 		if (es==null) {
-			es = new EntityStatistics(entityName);
+			es = new EntityStatisticsImpl(entityName);
 			entityStatistics.put(entityName, es);
 		}
 		return es;
@@ -192,19 +204,19 @@
 	public synchronized void updateEntity(String entityName) {
 		entityUpdateCount++;
 		EntityStatistics es = getEntityStatistics(entityName);
-		es.updateCount++;
+		es.incrUpdateCount();
 	}
 
 	public synchronized void insertEntity(String entityName) {
 		entityInsertCount++;
 		EntityStatistics es = getEntityStatistics(entityName);
-		es.insertCount++;
+		es.incrInsertCount();
 	}
 
 	public synchronized void deleteEntity(String entityName) {
 		entityDeleteCount++;
 		EntityStatistics es = getEntityStatistics(entityName);
-		es.deleteCount++;
+		es.incrDeleteCount();
 	}
 
 	/**
@@ -216,7 +228,7 @@
 	public synchronized CollectionStatistics getCollectionStatistics(String role) {
 		CollectionStatistics cs = (CollectionStatistics) collectionStatistics.get(role);
 		if (cs==null) {
-			cs = new CollectionStatistics(role);
+			cs = new CollectionStatisticsImpl(role);
 			collectionStatistics.put(role, cs);
 		}
 		return cs;
@@ -224,27 +236,27 @@
 	
 	public synchronized void loadCollection(String role) {
 		collectionLoadCount++;
-		getCollectionStatistics(role).loadCount++;
+		getCollectionStatistics(role).incrLoadCount();
 	}
 
 	public synchronized void fetchCollection(String role) {
 		collectionFetchCount++;
-		getCollectionStatistics(role).fetchCount++;
+		getCollectionStatistics(role).incrFetchCount();
 	}
 
 	public synchronized void updateCollection(String role) {
 		collectionUpdateCount++;
-		getCollectionStatistics(role).updateCount++;
+		getCollectionStatistics(role).incrUpdateCount();
 	}
 
 	public synchronized void recreateCollection(String role) {
 		collectionRecreateCount++;
-		getCollectionStatistics(role).recreateCount++;
+		getCollectionStatistics(role).incrRecreateCount();
 	}
 
 	public synchronized void removeCollection(String role) {
 		collectionRemoveCount++;
-		getCollectionStatistics(role).removeCount++;
+		getCollectionStatistics(role).incrRemoveCount();
 	}
 	
 	/**
@@ -263,7 +275,7 @@
 			if ( region == null ) {
 				return null;
 			}
-			slcs = new SecondLevelCacheStatistics( region );
+			slcs = new SecondLevelCacheStatisticsImpl( region );
 			secondLevelCacheStatistics.put( regionName, slcs );
 		}
 		return slcs;
@@ -271,17 +283,17 @@
 
 	public synchronized void secondLevelCachePut(String regionName) {
 		secondLevelCachePutCount++;
-		getSecondLevelCacheStatistics(regionName).putCount++;
+		getSecondLevelCacheStatistics(regionName).incrPutCount();
 	}
 
 	public synchronized void secondLevelCacheHit(String regionName) {
 		secondLevelCacheHitCount++;
-		getSecondLevelCacheStatistics(regionName).hitCount++;
+		getSecondLevelCacheStatistics(regionName).incrHitCount();
 	}
 
 	public synchronized void secondLevelCacheMiss(String regionName) {
 		secondLevelCacheMissCount++;
-		getSecondLevelCacheStatistics(regionName).missCount++;
+		getSecondLevelCacheStatistics(regionName).incrMissCount();
 	}
 
 	public synchronized void queryExecuted(String hql, int rows, long time) {
@@ -300,30 +312,30 @@
 		queryCacheHitCount++;
 		if (hql!=null) {
 			QueryStatistics qs = getQueryStatistics(hql);
-			qs.cacheHitCount++;
+			qs.incrCacheHitCount();
 		}
 		SecondLevelCacheStatistics slcs = getSecondLevelCacheStatistics(regionName);
-		slcs.hitCount++;
+		slcs.incrHitCount();
 	}
 
 	public synchronized void queryCacheMiss(String hql, String regionName) {
 		queryCacheMissCount++;
 		if (hql!=null) {
 			QueryStatistics qs = getQueryStatistics(hql);
-			qs.cacheMissCount++;
+			qs.incrCacheMissCount();
 		}
 		SecondLevelCacheStatistics slcs = getSecondLevelCacheStatistics(regionName);
-		slcs.missCount++;
+		slcs.incrMissCount();
 	}
 
 	public synchronized void queryCachePut(String hql, String regionName) {
 		queryCachePutCount++;
 		if (hql!=null) {
 			QueryStatistics qs = getQueryStatistics(hql);
-			qs.cachePutCount++;
+			qs.incrCachePutCount();
 		}
 		SecondLevelCacheStatistics slcs = getSecondLevelCacheStatistics(regionName);
-		slcs.putCount++;
+		slcs.incrPutCount();
 	}
 
 	/**
@@ -335,7 +347,7 @@
 	public synchronized QueryStatistics getQueryStatistics(String queryString) {
 		QueryStatistics qs = (QueryStatistics) queryStatistics.get(queryString);
 		if (qs==null) {
-			qs = new QueryStatistics(queryString);
+			qs = new QueryStatisticsImpl(queryString);
 			queryStatistics.put(queryString, qs);
 		}
 		return qs;
@@ -614,7 +626,7 @@
 
 	public void optimisticFailure(String entityName) {
 		optimisticFailureCount++;
-		getEntityStatistics(entityName).optimisticFailureCount++;
+		getEntityStatistics(entityName).incrOptimisticFailureCount();
 	}
 
 	public long getOptimisticFailureCount() {
@@ -658,5 +670,12 @@
 	public String getQueryExecutionMaxTimeQueryString() {
 		return queryExecutionMaxTimeQueryString;
 	}
+
+	/**
+	 * @see org.hibernate.stat.Statistics#getSessionStatistics(org.hibernate.engine.SessionImplementor)
+	 */
+	public SessionStatistics getSessionStatistics(SessionImplementor sessionImplementor) {
+		return this.statisticsFactory.createSessionStatistics(this, sessionImplementor);
+	}
 	
 }
\ No newline at end of file

Property changes on: core/src/main/java/org/hibernate/stat/simple/StatisticsImpl.java
___________________________________________________________________
Added: svn:mergeinfo

Index: core/src/main/java/org/hibernate/stat/CategorizedStats.java
===================================================================
--- core/src/main/java/org/hibernate/stat/CategorizedStats.java	(revision 0)
+++ core/src/main/java/org/hibernate/stat/CategorizedStats.java	(revision 0)
@@ -0,0 +1,33 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Middleware LLC.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ *
+ */
+package org.hibernate.stat;
+
+/**
+ * @author patmoore
+ *
+ */
+public interface CategorizedStats {
+	public String getCategoryName();
+}
Index: core/src/main/java/org/hibernate/stat/package.html
===================================================================
--- core/src/main/java/org/hibernate/stat/package.html	(revision 15666)
+++ core/src/main/java/org/hibernate/stat/package.html	(working copy)
@@ -30,5 +30,8 @@
 	This package exposes statistics about a running 
 	Hibernate instance to the application.
 </p>
+<p>To substitute a different Statistics implementation, create a new implementation of StatisticsFactory, 
+and supply it to the Configuration. Configuration supplies this factory to the SessionFactoryImplementors 
+created by {@link org.hibernate.cfg.Configuration#buildSessionFactory()}.</p>
 </body>
 </html>
Index: core/src/main/java/org/hibernate/stat/StatisticsFactory.java
===================================================================
--- core/src/main/java/org/hibernate/stat/StatisticsFactory.java	(revision 0)
+++ core/src/main/java/org/hibernate/stat/StatisticsFactory.java	(revision 0)
@@ -0,0 +1,54 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Middleware LLC.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ *
+ */
+package org.hibernate.stat;
+
+import org.hibernate.cfg.Configuration;
+import org.hibernate.engine.SessionFactoryImplementor;
+import org.hibernate.engine.SessionImplementor;
+
+/**
+ * Implementors can be supplied to {@link Configuration}s, which will in turn supply. Configuration will then pass 
+ * StatisticsFactory to a {@link SessionFactoryImplementor} which will then use the StatisticsFactory to create the
+ * StatisticsImplementor that will gather statistics.
+ * @author Patrick Moore
+ *
+ */
+public interface StatisticsFactory {
+	/**
+	 * create the StatisticsImplementor.
+	 * @param sessionFactoryImplementor
+	 * @param configuration
+	 * @return must not be null.
+	 */
+    public StatisticsImplementor createStatisticsImplementor(SessionFactoryImplementor sessionFactoryImplementor, Configuration configuration);
+    public SessionStatistics createSessionStatistics(StatisticsImplementor statistics, SessionImplementor sessionImplementor);
+    
+    /**
+     * 
+     * @return the value the factory supplies to the created {@link StatisticsImplementor}'s {@link StatisticsImplementor#setStatisticsEnabled(boolean)}.
+     */
+    public boolean isDefaultStatisticsEnabled();
+    public void setDefaultStatisticsEnabled(boolean defaultStatisticsEnabled);
+}
Index: core/src/main/java/org/hibernate/stat/CollectionStatistics.java
===================================================================
--- core/src/main/java/org/hibernate/stat/CollectionStatistics.java	(revision 15666)
+++ core/src/main/java/org/hibernate/stat/CollectionStatistics.java	(working copy)
@@ -26,46 +26,34 @@
 
 /**
  * Collection related statistics
- * 
+ *
  * @author Gavin King
  */
-public class CollectionStatistics extends CategorizedStatistics {
-	
-	CollectionStatistics(String role) {
-		super(role);
-	}
-	
-	long loadCount;
-	long fetchCount;
-	long updateCount;
-	long removeCount;
-	long recreateCount;
-	
-	public long getLoadCount() {
-		return loadCount;
-	}
-	public long getFetchCount() {
-		return fetchCount;
-	}
-	public long getRecreateCount() {
-		return recreateCount;
-	}
-	public long getRemoveCount() {
-		return removeCount;
-	}
-	public long getUpdateCount() {
-		return updateCount;
-	}
+public interface CollectionStatistics extends CategorizedStats {
 
-	public String toString() {
-		return new StringBuffer()
-		    .append("CollectionStatistics")
-			.append("[loadCount=").append(this.loadCount)
-			.append(",fetchCount=").append(this.fetchCount)
-			.append(",recreateCount=").append(this.recreateCount)
-			.append(",removeCount=").append(this.removeCount)
-			.append(",updateCount=").append(this.updateCount)
-			.append(']')
-			.toString();
-	}
+	public long getLoadCount();
+	public long getFetchCount();
+	public long getRecreateCount() ;
+	public long getRemoveCount();
+	public long getUpdateCount();
+	/**
+	 *
+	 */
+	public long incrLoadCount();
+	/**
+	 *
+	 */
+	public long incrFetchCount();
+	/**
+	 *
+	 */
+	public long incrUpdateCount();
+	/**
+	 *
+	 */
+	public long incrRemoveCount();
+	/**
+	 *
+	 */
+	public long incrRecreateCount();
 }
\ No newline at end of file
Index: core/src/main/java/org/hibernate/stat/SecondLevelCacheStatistics.java
===================================================================
--- core/src/main/java/org/hibernate/stat/SecondLevelCacheStatistics.java	(revision 15666)
+++ core/src/main/java/org/hibernate/stat/SecondLevelCacheStatistics.java	(working copy)
@@ -24,71 +24,33 @@
  */
 package org.hibernate.stat;
 
-import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Map;
 
-import org.hibernate.cache.CacheKey;
-import org.hibernate.cache.Region;
-
 /**
  * Second level cache statistics of a specific region
- * 
+ *
  * @author Gavin King
  */
-public class SecondLevelCacheStatistics extends CategorizedStatistics {
-	
-    private transient Region region;
-	long hitCount;
-	long missCount;
-	long putCount;
+public interface SecondLevelCacheStatistics extends CategorizedStats {
 
-	SecondLevelCacheStatistics(Region region) {
-		super( region.getName() );
-		this.region = region;
-	}
-	public long getHitCount() {
-		return hitCount;
-	}
-	public long getMissCount() {
-		return missCount;
-	}
-	public long getPutCount() {
-		return putCount;
-	}
-	public long getElementCountInMemory() {
-		return region.getElementCountInMemory();
-	}
-	public long getElementCountOnDisk() {
-		return region.getElementCountOnDisk();
-	}
-	public long getSizeInMemory() {
-		return region.getSizeInMemory();
-	}
-	
-	public Map getEntries() {
-		Map map = new HashMap();
-		Iterator iter = region.toMap().entrySet().iterator();
-		while ( iter.hasNext() ) {
-			Map.Entry me = (Map.Entry) iter.next();
-			map.put( ( (CacheKey) me.getKey() ).getKey(), me.getValue() );
-		}
-		return map;
-	}
+	public long getHitCount();
+	/**
+	 *
+	 */
+	public long incrHitCount();
+	public long getMissCount();
+	/**
+	 *
+	 */
+	public long incrMissCount();
+	public long getPutCount();
+	/**
+	 *
+	 */
+	public long incrPutCount();
+	public long getElementCountInMemory();
+	public long getElementCountOnDisk();
+	public long getSizeInMemory();
 
-	public String toString() {
-		StringBuffer buf = new StringBuffer()
-		    .append("SecondLevelCacheStatistics")
-			.append("[hitCount=").append(this.hitCount)
-			.append(",missCount=").append(this.missCount)
-			.append(",putCount=").append(this.putCount);
-		//not sure if this would ever be null but wanted to be careful
-		if ( region != null ) {
-			buf.append(",elementCountInMemory=").append(this.getElementCountInMemory())
-				.append(",elementCountOnDisk=").append(this.getElementCountOnDisk())
-				.append(",sizeInMemory=").append(this.getSizeInMemory());
-		}
-		buf.append(']');
-		return buf.toString();
-	}
+	public Map getEntries();
 }
Index: core/src/main/java/org/hibernate/stat/QueryStatistics.java
===================================================================
--- core/src/main/java/org/hibernate/stat/QueryStatistics.java	(revision 15666)
+++ core/src/main/java/org/hibernate/stat/QueryStatistics.java	(working copy)
@@ -26,109 +26,75 @@
 
 /**
  * Query statistics (HQL and SQL)
- * 
+ *
  * Note that for a cached query, the cache miss is equals to the db count
- * 
+ *
  * @author Gavin King
+ * @author Patrick Moore
  */
-public class QueryStatistics extends CategorizedStatistics {
+public interface QueryStatistics extends CategorizedStats {
 
-	/*package*/ long cacheHitCount;
-	/*package*/ long cacheMissCount;
-	/*package*/ long cachePutCount;
-	private long executionCount;
-	private long executionRowCount;
-	private long executionAvgTime;
-	private long executionMaxTime;
-	private long executionMinTime = Long.MAX_VALUE;
-
-	QueryStatistics(String query) {
-		super(query);
-	}
-
 	/**
-	 * queries executed to the DB
+	 * @return queries executed to the DB
 	 */
-	public long getExecutionCount() {
-		return executionCount;
-	}
-	
+	public long getExecutionCount();
+
 	/**
-	 * Queries retrieved successfully from the cache
+	 * @return Queries retrieved successfully from the cache
 	 */
-	public long getCacheHitCount() {
-		return cacheHitCount;
-	}
-	
-	public long getCachePutCount() {
-		return cachePutCount;
-	}
-	
-	public long getCacheMissCount() {
-		return cacheMissCount;
-	}
-	
+	public long getCacheHitCount();
+
+	public long getCachePutCount();
+
+	public long getCacheMissCount();
+
 	/**
 	 * Number of lines returned by all the executions of this query (from DB)
-	 * For now, {@link org.hibernate.Query#iterate()} 
-	 * and {@link org.hibernate.Query#scroll()()} do not fill this statistic
+	 * For now, {@link org.hibernate.Query#iterate()}
+	 * and {@link org.hibernate.Query#scroll()} do not fill this statistic
 	 *
 	 * @return The number of rows cumulatively returned by the given query; iterate
 	 * and scroll queries do not effect this total as their number of returned rows
 	 * is not known at execution time.
 	 */
-	public long getExecutionRowCount() {
-		return executionRowCount;
-	}
+	public long getExecutionRowCount();
 
 	/**
-	 * average time in ms taken by the excution of this query onto the DB
+	 * @return average time in ms taken by the excution of this query onto the DB
 	 */
-	public long getExecutionAvgTime() {
-		return executionAvgTime;
-	}
+	public long getExecutionAvgTime();
 
 	/**
-	 * max time in ms taken by the excution of this query onto the DB
+	 * @return max time in ms taken by the excution of this query onto the DB
 	 */
-	public long getExecutionMaxTime() {
-		return executionMaxTime;
-	}
-	
+	public long getExecutionMaxTime() ;
+
 	/**
-	 * min time in ms taken by the excution of this query onto the DB
+	 * @return min time in ms taken by the excution of this query onto the DB
 	 */
-	public long getExecutionMinTime() {
-		return executionMinTime;
-	}
-	
+	public long getExecutionMinTime();
+
 	/**
 	 * add statistics report of a DB query
-	 * 
+	 *
 	 * @param rows rows count returned
 	 * @param time time taken
 	 */
-	void executed(long rows, long time) {
-		if (time < executionMinTime) executionMinTime = time;
-		if (time > executionMaxTime) executionMaxTime = time;
-		executionAvgTime = ( executionAvgTime * executionCount + time ) / ( executionCount + 1 );
-		executionCount++;
-		executionRowCount += rows;
-	}
+	public void executed(long rows, long time);
 
-	public String toString() {
-		return new StringBuffer()
-				.append( "QueryStatistics" )
-				.append( "[cacheHitCount=" ).append( this.cacheHitCount )
-				.append( ",cacheMissCount=" ).append( this.cacheMissCount )
-				.append( ",cachePutCount=" ).append( this.cachePutCount )
-				.append( ",executionCount=" ).append( this.executionCount )
-				.append( ",executionRowCount=" ).append( this.executionRowCount )
-				.append( ",executionAvgTime=" ).append( this.executionAvgTime )
-				.append( ",executionMaxTime=" ).append( this.executionMaxTime )
-				.append( ",executionMinTime=" ).append( this.executionMinTime )
-				.append( ']' )
-				.toString();
-	}
+	/**
+	 *
+	 */
+	public long incrCachePutCount();
 
+	/**
+	 *
+	 */
+	public long incrCacheMissCount();
+
+	/**
+	 *
+	 */
+	public long incrCacheHitCount();
+
 }
Index: core/src/main/java/org/hibernate/stat/simple/SessionStatisticsImpl.java
===================================================================
--- core/src/main/java/org/hibernate/stat/simple/SessionStatisticsImpl.java	(revision 0)
+++ core/src/main/java/org/hibernate/stat/simple/SessionStatisticsImpl.java	(working copy)
@@ -22,12 +22,13 @@
  * Boston, MA  02110-1301  USA
  *
  */
-package org.hibernate.stat;
+package org.hibernate.stat.simple;
 
 import java.util.Collections;
 import java.util.Set;
 
 import org.hibernate.engine.SessionImplementor;
+import org.hibernate.stat.SessionStatistics;
 
 /**
  * @author Gavin King

Property changes on: core/src/main/java/org/hibernate/stat/simple/SessionStatisticsImpl.java
___________________________________________________________________
Added: svn:mergeinfo

Index: jmx/src/main/java/org/hibernate/jmx/StatisticsService.java
===================================================================
--- jmx/src/main/java/org/hibernate/jmx/StatisticsService.java	(revision 15666)
+++ jmx/src/main/java/org/hibernate/jmx/StatisticsService.java	(working copy)
@@ -9,13 +9,15 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.hibernate.SessionFactory;
+import org.hibernate.engine.SessionImplementor;
 import org.hibernate.impl.SessionFactoryObjectFactory;
 import org.hibernate.stat.CollectionStatistics;
 import org.hibernate.stat.EntityStatistics;
 import org.hibernate.stat.QueryStatistics;
 import org.hibernate.stat.SecondLevelCacheStatistics;
+import org.hibernate.stat.SessionStatistics;
 import org.hibernate.stat.Statistics;
-import org.hibernate.stat.StatisticsImpl;
+import org.hibernate.stat.simple.StatisticsImpl;
 
 /**
  * JMX service for Hibernate statistics<br>
@@ -314,4 +316,12 @@
 	public String getQueryExecutionMaxTimeQueryString() {
 		return stats.getQueryExecutionMaxTimeQueryString();
 	}
+
+	/**
+	 * @see org.hibernate.stat.Statistics#getSessionStatistics(org.hibernate.engine.SessionImplementor)
+	 */
+	public SessionStatistics getSessionStatistics(
+			SessionImplementor sessionImplementor) {
+		return stats.getSessionStatistics(sessionImplementor);
+	}
 }
Index: core/src/main/java/org/hibernate/cfg/Environment.java
===================================================================
--- core/src/main/java/org/hibernate/cfg/Environment.java	(revision 15666)
+++ core/src/main/java/org/hibernate/cfg/Environment.java	(working copy)
@@ -176,7 +176,7 @@
  */
 public final class Environment {
 
-	public static final String VERSION = "3.3.0.GA";
+	public static final String VERSION = "3.4.0-amplafi-SNAPSHOT";
 
 	/**
 	 * <tt>ConnectionProvider</tt> implementor to use when obtaining connections
Index: core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java
===================================================================
--- core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java	(revision 15666)
+++ core/src/main/java/org/hibernate/impl/SessionFactoryImpl.java	(working copy)
@@ -111,7 +111,7 @@
 import org.hibernate.pretty.MessageHelper;
 import org.hibernate.proxy.EntityNotFoundDelegate;
 import org.hibernate.stat.Statistics;
-import org.hibernate.stat.StatisticsImpl;
+import org.hibernate.stat.StatisticsFactory;
 import org.hibernate.stat.StatisticsImplementor;
 import org.hibernate.tool.hbm2ddl.SchemaExport;
 import org.hibernate.tool.hbm2ddl.SchemaUpdate;
@@ -176,7 +176,7 @@
 	private final transient UpdateTimestampsCache updateTimestampsCache;
 	private final transient Map queryCaches;
 	private final transient Map allCacheRegions = new HashMap();
-	private final transient StatisticsImpl statistics = new StatisticsImpl(this);
+	private final transient StatisticsImplementor statistics;
 	private final transient EventListeners eventListeners;
 	private final transient CurrentSessionContext currentSessionContext;
 	private final transient EntityNotFoundDelegate entityNotFoundDelegate;
@@ -193,10 +193,10 @@
 	        Mapping mapping,
 	        Settings settings,
 	        EventListeners listeners,
-			SessionFactoryObserver observer) throws HibernateException {
+			SessionFactoryObserver observer,
+			StatisticsFactory statisticsFactory) throws HibernateException {
 
 		log.info("building session factory");
-
 		this.properties = new Properties();
 		this.properties.putAll( cfg.getProperties() );
 		this.interceptor = cfg.getInterceptor();
@@ -416,8 +416,8 @@
 		}
 
 		//stats
-		getStatistics().setStatisticsEnabled( settings.isStatisticsEnabled() );
-
+		statisticsFactory.setDefaultStatisticsEnabled( settings.isStatisticsEnabled() );
+		this.statistics = statisticsFactory.createStatisticsImplementor(this, cfg);
 		// EntityNotFoundDelegate
 		EntityNotFoundDelegate entityNotFoundDelegate = cfg.getEntityNotFoundDelegate();
 		if ( entityNotFoundDelegate == null ) {
Index: core/src/main/java/org/hibernate/stat/simple/CollectionStatisticsImpl.java
===================================================================
--- core/src/main/java/org/hibernate/stat/simple/CollectionStatisticsImpl.java	(revision 0)
+++ core/src/main/java/org/hibernate/stat/simple/CollectionStatisticsImpl.java	(working copy)
@@ -22,40 +22,61 @@
  * Boston, MA  02110-1301  USA
  *
  */
-package org.hibernate.stat;
+package org.hibernate.stat.simple;
 
+import org.hibernate.stat.CollectionStatistics;
+
 /**
  * Collection related statistics
- * 
+ *
  * @author Gavin King
  */
-public class CollectionStatistics extends CategorizedStatistics {
-	
-	CollectionStatistics(String role) {
+public class CollectionStatisticsImpl extends CategorizedStatistics implements CollectionStatistics {
+
+	private long loadCount;
+	private long fetchCount;
+	private long updateCount;
+	private long removeCount;
+	private long recreateCount;
+
+	public CollectionStatisticsImpl(String role) {
 		super(role);
 	}
-	
-	long loadCount;
-	long fetchCount;
-	long updateCount;
-	long removeCount;
-	long recreateCount;
-	
-	public long getLoadCount() {
+
+	public synchronized long getLoadCount() {
 		return loadCount;
 	}
-	public long getFetchCount() {
+
+	public synchronized long incrLoadCount() {
+		return ++loadCount;
+	}
+
+	public synchronized long getFetchCount() {
 		return fetchCount;
 	}
-	public long getRecreateCount() {
+
+	public synchronized long incrFetchCount() {
+		return ++fetchCount;
+	}
+	public synchronized long getRecreateCount() {
 		return recreateCount;
 	}
-	public long getRemoveCount() {
+
+	public synchronized long incrRecreateCount() {
+		return ++recreateCount;
+	}
+	public synchronized long getRemoveCount() {
 		return removeCount;
 	}
-	public long getUpdateCount() {
+	public synchronized long incrRemoveCount() {
+		return ++removeCount;
+	}
+	public synchronized long getUpdateCount() {
 		return updateCount;
 	}
+	public synchronized long incrUpdateCount() {
+		return ++updateCount;
+	}
 
 	public String toString() {
 		return new StringBuffer()

Property changes on: core/src/main/java/org/hibernate/stat/simple/CollectionStatisticsImpl.java
___________________________________________________________________
Added: svn:mergeinfo

Index: core/src/main/java/org/hibernate/stat/CategorizedStatistics.java
===================================================================
--- core/src/main/java/org/hibernate/stat/CategorizedStatistics.java	(revision 15666)
+++ core/src/main/java/org/hibernate/stat/CategorizedStatistics.java	(working copy)
@@ -1,46 +0,0 @@
-/*
- * Hibernate, Relational Persistence for Idiomatic Java
- *
- * Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
- * indicated by the @author tags or express copyright attribution
- * statements applied by the authors.  All third-party contributions are
- * distributed under license by Red Hat Middleware LLC.
- *
- * This copyrighted material is made available to anyone wishing to use, modify,
- * copy, or redistribute it subject to the terms and conditions of the GNU
- * Lesser General Public License, as published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
- * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
- * for more details.
- *
- * You should have received a copy of the GNU Lesser General Public License
- * along with this distribution; if not, write to:
- * Free Software Foundation, Inc.
- * 51 Franklin Street, Fifth Floor
- * Boston, MA  02110-1301  USA
- *
- */
-package org.hibernate.stat;
-
-import java.io.Serializable;
-
-/**
- * Statistics for a particular "category" (a named entity,
- * collection role, second level cache region or query).
- * 
- * @author Gavin King
- */
-public class CategorizedStatistics implements Serializable {
-	
-	private final String categoryName;
-
-	CategorizedStatistics(String categoryName) {
-		this.categoryName = categoryName;
-	}
-	
-	public String getCategoryName() {
-		return categoryName;
-	}
-}
Index: core/src/main/java/org/hibernate/stat/simple/CategorizedStatistics.java
===================================================================
--- core/src/main/java/org/hibernate/stat/simple/CategorizedStatistics.java	(revision 0)
+++ core/src/main/java/org/hibernate/stat/simple/CategorizedStatistics.java	(working copy)
@@ -22,7 +22,7 @@
  * Boston, MA  02110-1301  USA
  *
  */
-package org.hibernate.stat;
+package org.hibernate.stat.simple;
 
 import java.io.Serializable;
 
@@ -36,7 +36,7 @@
 	
 	private final String categoryName;
 
-	CategorizedStatistics(String categoryName) {
+	public CategorizedStatistics(String categoryName) {
 		this.categoryName = categoryName;
 	}
 	

Property changes on: core/src/main/java/org/hibernate/stat/simple/CategorizedStatistics.java
___________________________________________________________________
Added: svn:mergeinfo

